#include <iostream>
#include "Julia.h"


Julia::Julia () 
{
	this->setIterations(0);
}

void Julia::iterate () 
{
	// Either plot the complex value using domain coloring or the number of iterations using colormaps
	this->setValue(this->compute(this->getValue(), this->getFunctionIterator()));
	// this->SET_value(this->GET_value() * this->GET_value() + this->GET_value() *Complex(-0.44039418090763179635892358960207219550871695292756801990761692, 0.89780452517387997278535658831275933360015035051582696090016064));
	this->setIterations(this->getIterations() + 1);

	// Some interesting values
	/*Milnor*/
	/*Complex(-0.44039418090763179635892358960207219550871695292756801990761692, 0.89780452517387997278535658831275933360015035051582696090016064)*/
	/*1/3*/
	/*Complex(-0.5, 0.86602540378443864676372317075293618347140262690519031402790348972596650845440001854057309337862428783781307070770335151498)*/
	/*Root 2*/
	/*Complex(-0.85821618566881769166189569256767389996692907821982734151817135, 0.51328839715706163520666694106036591658344988960943087656110007);*/
}


std::unique_ptr<Function> Julia::cloneFunction () const
{
	return std::make_unique<Julia>(*this);
}

void Julia::evaluate ()
{
	this->setValue(this->getInput());

	for (int i = 0; i < getBreakoutIterator(); i++)
	{
		this->iterate();
	}
}

void Julia::print ()
{
	std::cout << this->getIterations() << std::endl;
}


/* Insanity 1/9 (double accuracy go brr)

Complex(0.77047318671901778332753946957930109644482624914690356928372970740463839404823295723016789181213353005375682168
99820702105484762140546172724438802863066395963066189778519955971018295098052710198693411506980471950995514234238581920
64664625437107742572073493908387109364633367265083926227990842313508159557929567344208308758458647149559483076592619522
78487137618899008591260153231872337946521918306350370357402547348538658467508344286082254429169612512109847483859900008
63862422634870053865300697811292633705326583723654670864295752035226002831873283828361763882212236141304637686874571917
32092846372037478912152705630173252918947825165126990028261700606371928445700896632811206886093861166347005128546125935
63939597072140357756116704880229207166325708785699290533279890158645717590047107730483563321636954401533218858636910850
34721449116082317841347270433070432573453099080004439766760664545601435933428307553736430509938881536917016707206785223
399068253399090962163575535838623560912284835639810857667498130854999301750376457489006648450, 

0.637472406106367523969065214540763549987459506011404558134683035129691881871712309977700600055292724756187617372395454
25313421649420834388208561677616513107385683530044333031659752705613519698558900519652179539501236216143881252058288623
20269223722615472234467063386779351759922321957865057267959753984293624981182679355276505412005781691577258392335915348
10388379985811157559012283572247762499034854220806345380792006030972622551396453830540909348879867428499924840322124641
04420225302053189853164682190750518485393591548631790360130472214227632221708154650006414754514637397546521627951406528
03786426103644384062879467874927439684672188667240156435317625426776861359247834734030841376756674209749561828917720515
41691434960743028172221690232306469013662261921009438547976523060928591282167563142827971610436186372990052752775586246
22685185060825594373130250803320977148421060293492826729589629920424949669935442220422798460252616336003763730923619527
74296574194615206178426866092610941182549333160692354981878059219398561269360020718150)
*/